apiVersion: admissionregistration.k8s.io/v1
kind: ValidatingAdmissionPolicy
metadata:
  name: restricted-pss-policy
spec:
  failurePolicy: Fail
  matchConstraints:
    resourceRules:
      - apiGroups: [""]
        apiVersions: ["v1"]
        operations: ["CREATE", "UPDATE"]
        resources: ["pods"]
  variables:
    - name: containers
      expression: |
        object.spec.?containers.orValue([]).map(c, c) +
        object.spec.?initContainers.orValue([]).map(c, c) +
        object.spec.?ephemeralContainers.orValue([]).map(c, c)
    - name: runAsUsers
      expression: |
        [object.spec.?securityContext.?runAsUser] +
        variables.containers.map(c, c.?securityContext.?runAsUser)
  validations:
    # Volume Types
    - expression: |
        !has(object.spec.volumes) ||
        object.spec.volumes.all(v,
          has(v.configMap) ||
          has(v.csi) ||
          has(v.downwardAPI) ||
          has(v.emptyDir) ||
          has(v.ephemeral) ||
          has(v.persistentVolumeClaim) ||
          has(v.projected) ||
          has(v.secret)
        )
      message: "Volume types must be in the restricted allowed list"

    # Privilege Escalation
    - expression: |
        variables.containers.all(c, c.?securityContext.?allowPrivilegeEscalation == optional.of(false))
      message: "All containers must set securityContext.allowPrivilegeEscalation to false"

    # Running as Non-root
    - expression: |
        object.spec.?securityContext.?runAsNonRoot != optional.of(false) &&
        variables.containers.all(c,
          c.?securityContext.?runAsNonRoot == optional.of(true) ||
          (c.?securityContext.?runAsNonRoot == optional.none() &&
            object.spec.?securityContext.?runAsNonRoot == optional.of(true)))
      message: "All containers must set securityContext.runAsNonRoot to true, unless Pod securityContext.runAsNonRoot is set to true"

    # Running as Non-root user
    - expression: |
        variables.runAsUsers.all(runAsUser, runAsUser.orValue(1000) != 0)
      message: "Containers must not set runAsUser to 0"

    # Seccomp
    - expression: |
        variables.containers.all(c,
          (c.?securityContext.?seccompProfile.?type.orValue("") in ["RuntimeDefault", "Localhost"]) ||
          (c.?securityContext.?seccompProfile.?type == optional.none() &&
            object.spec.?securityContext.?seccompProfile.?type.orValue("") in ["RuntimeDefault", "Localhost"]))
      message: "All containers must set securityContext.seccompProfile.type to RuntimeDefault or Localhost, unless Pod securityContext.seccompProfile.type is set to RuntimeDefault or Localhost"

    # Capabilities
    - expression: |
        variables.containers.all(c, c.?securityContext.?capabilities.?drop.orValue([]).exists(cap, cap == "ALL"))
      message: "All containers must drop all capabilities (capabilities.drop must include \"ALL\")"
    - expression: |
        variables.containers.all(c, c.?securityContext.?capabilities.?add.orValue([]).all(cap,
          cap in ["NET_BIND_SERVICE"]))
      message: "Adding capabilities outside the allowed restricted list is not permitted"
---
apiVersion: admissionregistration.k8s.io/v1
kind: ValidatingAdmissionPolicyBinding
metadata:
  name: restricted-pss-binding
spec:
  policyName: restricted-pss-policy
  validationActions: ["Deny"]
  matchResources:
    resourceRules:
      - apiGroups: [""]
        apiVersions: ["v1"]
        resources: ["pods"]
        operations: ["CREATE", "UPDATE"]
    namespaceSelector:
      matchExpressions:
        - key: pod-security.kubernetes.io/enforce
          operator: In
          values: ["restricted"]
    objectSelector:
      matchExpressions:
        - key: app.kubernetes.io/created-by
          operator: NotIn
          values:
            - volsync
