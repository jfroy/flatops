---
# Host Namespaces
apiVersion: admissionregistration.k8s.io/v1
kind: ValidatingAdmissionPolicy
metadata:
  name: disallow-host-namespace
spec:
  failurePolicy: Fail
  matchConstraints:
    resourceRules:
      - apiGroups: [""]
        apiVersions: ["v1"]
        operations: ["CREATE", "UPDATE"]
        resources: ["pods"]
  validations:
    - expression: |
        !object.spec.?hostNetwork.orValue(false)
      message: "spec.hostNetwork must be false or unset"
    - expression: |
        !object.spec.?hostPID.orValue(false)
      message: "spec.hostPID must be false or unset"
    - expression: |
        !object.spec.?hostIPC.orValue(false)
      message: "spec.hostIPC must be false or unset"
---
apiVersion: admissionregistration.k8s.io/v1
kind: ValidatingAdmissionPolicyBinding
metadata:
  name: disallow-host-namespace-binding
spec:
  policyName: disallow-host-namespace
  validationActions: ["Deny"]
  matchResources:
    resourceRules:
      - apiGroups: [""]
        apiVersions: ["v1"]
        resources: ["pods"]
        operations: ["CREATE", "UPDATE"]
    namespaceSelector:
      matchExpressions:
        - key: pod-security.kubernetes.io/enforce
          operator: NotIn
          values: ["privileged"]
    objectSelector:
      matchExpressions:
        - key: app.kubernetes.io/name
          operator: NotIn
          values:
            - esphome-device-builder
---
# Privileged Containers
apiVersion: admissionregistration.k8s.io/v1
kind: ValidatingAdmissionPolicy
metadata:
  name: disallow-privileged-containers
spec:
  failurePolicy: Fail
  matchConstraints:
    resourceRules:
      - apiGroups: [""]
        apiVersions: ["v1"]
        operations: ["CREATE", "UPDATE"]
        resources: ["pods"]
  variables:
    - name: containers
      expression: |
        object.spec.?containers.orValue([]).map(c, c) +
        object.spec.?initContainers.orValue([]).map(c, c) +
        object.spec.?ephemeralContainers.orValue([]).map(c, c)
  validations:
    - expression: |
        variables.containers.all(c, c.?securityContext.?privileged.orValue(false) == false)
      message: "All containers must not be privileged"
---
apiVersion: admissionregistration.k8s.io/v1
kind: ValidatingAdmissionPolicyBinding
metadata:
  name: disallow-privileged-containers-binding
spec:
  policyName: disallow-privileged-containers
  validationActions: ["Deny"]
  matchResources:
    resourceRules:
      - apiGroups: [""]
        apiVersions: ["v1"]
        resources: ["pods"]
        operations: ["CREATE", "UPDATE"]
    namespaceSelector:
      matchExpressions:
        - key: pod-security.kubernetes.io/enforce
          operator: NotIn
          values: ["privileged"]
    objectSelector:
      matchExpressions:
        - key: app.kubernetes.io/name
          operator: NotIn
          values:
            - buildkit
---
# Capabilities
apiVersion: admissionregistration.k8s.io/v1
kind: ValidatingAdmissionPolicy
metadata:
  name: restrict-added-capabilities
spec:
  failurePolicy: Fail
  matchConstraints:
    resourceRules:
      - apiGroups: [""]
        apiVersions: ["v1"]
        operations: ["CREATE", "UPDATE"]
        resources: ["pods"]
  variables:
    - name: containers
      expression: |
        object.spec.?containers.orValue([]).map(c, c) +
        object.spec.?initContainers.orValue([]).map(c, c) +
        object.spec.?ephemeralContainers.orValue([]).map(c, c)
  validations:
    - expression: |
        variables.containers.all(c, c.?securityContext.?capabilities.?add.orValue([]).all(cap, cap in
          ["AUDIT_WRITE", "CHOWN", "DAC_OVERRIDE", "FOWNER", "FSETID", "KILL", "MKNOD", "NET_BIND_SERVICE", "SETFCAP", "SETGID", "SETPCAP", "SETUID", "SYS_CHROOT"]))
      message: "Adding capabilities outside the allowed baseline list is not permitted"
---
apiVersion: admissionregistration.k8s.io/v1
kind: ValidatingAdmissionPolicyBinding
metadata:
  name: restrict-added-capabilities-binding
spec:
  policyName: restrict-added-capabilities
  validationActions: ["Deny"]
  matchResources:
    resourceRules:
      - apiGroups: [""]
        apiVersions: ["v1"]
        resources: ["pods"]
        operations: ["CREATE", "UPDATE"]
    namespaceSelector:
      matchExpressions:
        - key: pod-security.kubernetes.io/enforce
          operator: NotIn
          values: ["privileged"]
    objectSelector:
      matchExpressions:
        - key: gluetun
          operator: NotIn
          values:
            - "true"
---
# HostPath Volumes
apiVersion: admissionregistration.k8s.io/v1
kind: ValidatingAdmissionPolicy
metadata:
  name: disallow-hostpath-volumes
spec:
  failurePolicy: Fail
  matchConstraints:
    resourceRules:
      - apiGroups: [""]
        apiVersions: ["v1"]
        operations: ["CREATE", "UPDATE"]
        resources: ["pods"]
  validations:
    - expression: |
        object.spec.?volumes.orValue([]).all(v, v.?hostPath == optional.none())
      message: "HostPath volumes are not allowed"
---
apiVersion: admissionregistration.k8s.io/v1
kind: ValidatingAdmissionPolicyBinding
metadata:
  name: disallow-hostpath-volumes-binding
spec:
  policyName: disallow-hostpath-volumes
  validationActions: ["Deny"]
  matchResources:
    resourceRules:
      - apiGroups: [""]
        apiVersions: ["v1"]
        resources: ["pods"]
        operations: ["CREATE", "UPDATE"]
    namespaceSelector:
      matchExpressions:
        - key: pod-security.kubernetes.io/enforce
          operator: NotIn
          values: ["privileged"]
---
# Host Ports
apiVersion: admissionregistration.k8s.io/v1
kind: ValidatingAdmissionPolicy
metadata:
  name: disallow-hostport
spec:
  failurePolicy: Fail
  matchConstraints:
    resourceRules:
      - apiGroups: [""]
        apiVersions: ["v1"]
        operations: ["CREATE", "UPDATE"]
        resources: ["pods"]
  variables:
    - name: containers
      expression: |
        object.spec.?containers.orValue([]).map(c, c) +
        object.spec.?initContainers.orValue([]).map(c, c) +
        object.spec.?ephemeralContainers.orValue([]).map(c, c)
  validations:
    - expression: |
        variables.containers.all(c, c.?ports.orValue([]).all(p, p.?hostPort.orValue(0) == 0))
      message: "HostPort usage must be 0 or unset"
---
apiVersion: admissionregistration.k8s.io/v1
kind: ValidatingAdmissionPolicyBinding
metadata:
  name: disallow-hostport-binding
spec:
  policyName: disallow-hostport
  validationActions: ["Deny"]
  matchResources:
    resourceRules:
      - apiGroups: [""]
        apiVersions: ["v1"]
        resources: ["pods"]
        operations: ["CREATE", "UPDATE"]
    namespaceSelector:
      matchExpressions:
        - key: pod-security.kubernetes.io/enforce
          operator: NotIn
          values: ["privileged"]
    objectSelector:
      matchExpressions:
        - key: app.kubernetes.io/name
          operator: NotIn
          values:
            - esphome-device-builder
            - plex
---
# AppArmor
apiVersion: admissionregistration.k8s.io/v1
kind: ValidatingAdmissionPolicy
metadata:
  name: restrict-apparmor-profile
spec:
  failurePolicy: Fail
  matchConstraints:
    resourceRules:
      - apiGroups: [""]
        apiVersions: ["v1"]
        operations: ["CREATE", "UPDATE"]
        resources: ["pods"]
  variables:
    - name: containers
      expression: |
        object.spec.?containers.orValue([]).map(c, c) +
        object.spec.?initContainers.orValue([]).map(c, c) +
        object.spec.?ephemeralContainers.orValue([]).map(c, c)
  validations:
    - expression: |
        object.spec.?securityContext.?appArmorProfile.?type.orValue("") in ["RuntimeDefault", "Localhost", ""]
      message: "AppArmor profile must be RuntimeDefault, Localhost, or unset"
    - expression: |
        variables.containers.all(c, c.?securityContext.?appArmorProfile.?type.orValue("") in ["RuntimeDefault", "Localhost", ""])
      message: "AppArmor profile must be RuntimeDefault, Localhost, or unset"
    - expression: |
        !has(object.metadata.annotations) ||
        !object.metadata.annotations.exists(a, a == "container.apparmor.security.beta.kubernetes.io")
      message: "Pods must not have the 'container.apparmor.security.beta.kubernetes.io' annotation"
---
apiVersion: admissionregistration.k8s.io/v1
kind: ValidatingAdmissionPolicyBinding
metadata:
  name: restrict-apparmor-profile-binding
spec:
  policyName: restrict-apparmor-profile
  validationActions: ["Deny"]
  matchResources:
    resourceRules:
      - apiGroups: [""]
        apiVersions: ["v1"]
        resources: ["pods"]
        operations: ["CREATE", "UPDATE"]
    namespaceSelector:
      matchExpressions:
        - key: pod-security.kubernetes.io/enforce
          operator: NotIn
          values: ["privileged"]
---
# SELinux
apiVersion: admissionregistration.k8s.io/v1
kind: ValidatingAdmissionPolicy
metadata:
  name: restrict-selinux-options
spec:
  failurePolicy: Fail
  matchConstraints:
    resourceRules:
      - apiGroups: [""]
        apiVersions: ["v1"]
        operations: ["CREATE", "UPDATE"]
        resources: ["pods"]
  variables:
    - name: containers
      expression: |
        object.spec.?containers.orValue([]).map(c, c) +
        object.spec.?initContainers.orValue([]).map(c, c) +
        object.spec.?ephemeralContainers.orValue([]).map(c, c)
    - name: seLinuxOptions
      expression: |
        [object.spec.?securityContext.?seLinuxOptions] +
        variables.containers.map(c, c.?securityContext.?seLinuxOptions)
  validations:
    - expression: |
        variables.seLinuxOptions.all(o, o.?type.orValue("") in
          ["", "container_t", "container_init_t", "container_kvm_t", "container_engine_t"])
      message: "SELinux type must be in the baseline allowed list or unset"
    - expression: |
        variables.seLinuxOptions.all(o, o.?user.orValue("") == "")
      message: "SELinux user must be empty or unset"
    - expression: |
        variables.seLinuxOptions.all(o, o.?role.orValue("") == "")
---
apiVersion: admissionregistration.k8s.io/v1
kind: ValidatingAdmissionPolicyBinding
metadata:
  name: restrict-selinux-options-binding
spec:
  policyName: restrict-selinux-options
  validationActions: ["Deny"]
  matchResources:
    resourceRules:
      - apiGroups: [""]
        apiVersions: ["v1"]
        resources: ["pods"]
        operations: ["CREATE", "UPDATE"]
    namespaceSelector:
      matchExpressions:
        - key: pod-security.kubernetes.io/enforce
          operator: NotIn
          values: ["privileged"]
---
# /proc Mount Type
apiVersion: admissionregistration.k8s.io/v1
kind: ValidatingAdmissionPolicy
metadata:
  name: restrict-proc-mount-type
spec:
  failurePolicy: Fail
  matchConstraints:
    resourceRules:
      - apiGroups: [""]
        apiVersions: ["v1"]
        operations: ["CREATE", "UPDATE"]
        resources: ["pods"]
  variables:
    - name: containers
      expression: |
        object.spec.?containers.orValue([]).map(c, c) +
        object.spec.?initContainers.orValue([]).map(c, c) +
        object.spec.?ephemeralContainers.orValue([]).map(c, c)
  validations:
    - expression: |
        variables.containers.all(c, c.?securityContext.?procMount.orValue("Default") == "Default")
      message: "Container /proc mount type must be 'Default' or unset"
---
apiVersion: admissionregistration.k8s.io/v1
kind: ValidatingAdmissionPolicyBinding
metadata:
  name: restrict-proc-mount-type-binding
spec:
  policyName: restrict-proc-mount-type
  validationActions: ["Deny"]
  matchResources:
    resourceRules:
      - apiGroups: [""]
        apiVersions: ["v1"]
        resources: ["pods"]
        operations: ["CREATE", "UPDATE"]
    namespaceSelector:
      matchExpressions:
        - key: pod-security.kubernetes.io/enforce
          operator: NotIn
          values: ["privileged"]
---
# Seccomp
apiVersion: admissionregistration.k8s.io/v1
kind: ValidatingAdmissionPolicy
metadata:
  name: restrict-seccomp-profile
spec:
  failurePolicy: Fail
  matchConstraints:
    resourceRules:
      - apiGroups: [""]
        apiVersions: ["v1"]
        operations: ["CREATE", "UPDATE"]
        resources: ["pods"]
  variables:
    - name: containers
      expression: |
        object.spec.?containers.orValue([]).map(c, c) +
        object.spec.?initContainers.orValue([]).map(c, c) +
        object.spec.?ephemeralContainers.orValue([]).map(c, c)
    - name: seccompProfiles
      expression: |
        [object.spec.?securityContext.?seccompProfile] +
        variables.containers.map(c, c.?securityContext.?seccompProfile)
  validations:
    - expression: |
        variables.seccompProfiles.all(p, p.?type.orValue("RuntimeDefault") in ['RuntimeDefault', 'Localhost'])
      message: "seccomp profile must be RuntimeDefault, Localhost, or unset"
---
apiVersion: admissionregistration.k8s.io/v1
kind: ValidatingAdmissionPolicyBinding
metadata:
  name: restrict-seccomp-profile-binding
spec:
  policyName: restrict-seccomp-profile
  validationActions: ["Deny"]
  matchResources:
    resourceRules:
      - apiGroups: [""]
        apiVersions: ["v1"]
        resources: ["pods"]
        operations: ["CREATE", "UPDATE"]
    namespaceSelector:
      matchExpressions:
        - key: pod-security.kubernetes.io/enforce
          operator: NotIn
          values: ["privileged"]
    objectSelector:
      matchExpressions:
        - key: app.kubernetes.io/name
          operator: NotIn
          values:
            - dragonfly
---
# Sysctls
apiVersion: admissionregistration.k8s.io/v1
kind: ValidatingAdmissionPolicy
metadata:
  name: restrict-sysctls
spec:
  failurePolicy: Fail
  matchConstraints:
    resourceRules:
      - apiGroups: [""]
        apiVersions: ["v1"]
        operations: ["CREATE", "UPDATE"]
        resources: ["pods"]
  validations:
    - expression: |
        object.spec.?securityContext.?sysctls.orValue([]).all(s, s.name in [
          "kernel.shm_rmid_forced",
          "net.ipv4.ip_local_port_range",
          "net.ipv4.ip_local_reserved_ports",
          "net.ipv4.ip_unprivileged_port_start",
          "net.ipv4.ping_group_range",
          "net.ipv4.tcp_fin_timeout",
          "net.ipv4.tcp_keepalive_intvl",
          "net.ipv4.tcp_keepalive_probes",
          "net.ipv4.tcp_keepalive_time",
          "net.ipv4.tcp_syncookies"])
      message: "sysctls must be within the allowed baseline list or unset"
---
apiVersion: admissionregistration.k8s.io/v1
kind: ValidatingAdmissionPolicyBinding
metadata:
  name: restrict-sysctls-binding
spec:
  policyName: restrict-sysctls
  validationActions: ["Deny"]
  matchResources:
    resourceRules:
      - apiGroups: [""]
        apiVersions: ["v1"]
        resources: ["pods"]
        operations: ["CREATE", "UPDATE"]
    namespaceSelector:
      matchExpressions:
        - key: pod-security.kubernetes.io/enforce
          operator: NotIn
          values: ["privileged"]
