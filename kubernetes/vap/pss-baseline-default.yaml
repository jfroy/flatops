---
# Host Namespaces
apiVersion: admissionregistration.k8s.io/v1
kind: ValidatingAdmissionPolicy
metadata:
  name: disallow-host-namespace
spec:
  failurePolicy: Fail
  matchConstraints:
    resourceRules:
      - apiGroups: [""]
        apiVersions: ["v1"]
        operations: ["CREATE", "UPDATE"]
        resources: ["pods"]
  validations:
    - expression: |
        !has(object.spec.hostNetwork) ||
        object.spec.hostNetwork == false
      message: "spec.hostNetwork must be false"
    - expression: |
        !has(object.spec.hostPID) ||
        object.spec.hostPID == false
      message: "spec.hostPID must be false"
    - expression: |
        !has(object.spec.hostIPC) ||
        object.spec.hostIPC == false
      message: "spec.hostIPC must be false"
---
apiVersion: admissionregistration.k8s.io/v1
kind: ValidatingAdmissionPolicyBinding
metadata:
  name: disallow-host-namespace-binding
spec:
  policyName: disallow-host-namespace
  validationActions: ["Deny"]
  matchResources:
    resourceRules:
      - apiGroups: [""]
        apiVersions: ["v1"]
        resources: ["pods"]
        operations: ["CREATE", "UPDATE"]
    namespaceSelector:
      matchExpressions:
        - key: pod-security.kubernetes.io/enforce
          operator: NotIn
          values: ["privileged"]
    objectSelector:
      matchExpressions:
        - key: app.kubernetes.io/name
          operator: NotIn
          values:
            - esphome-device-builder
---
# Privileged Containers
apiVersion: admissionregistration.k8s.io/v1
kind: ValidatingAdmissionPolicy
metadata:
  name: disallow-privileged-containers
spec:
  failurePolicy: Fail
  matchConstraints:
    resourceRules:
      - apiGroups: [""]
        apiVersions: ["v1"]
        operations: ["CREATE", "UPDATE"]
        resources: ["pods"]
  validations:
    - expression: |
        !has(object.spec.containers) ||
        object.spec.containers.all(c,
          !has(c.securityContext) ||
          !has(c.securityContext.privileged) ||
          c.securityContext.privileged == false
        )
      message: "All containers must not be privileged"
    - expression: |
        !has(object.spec.initContainers) ||
        object.spec.initContainers.all(c,
          !has(c.securityContext) ||
          !has(c.securityContext.privileged) ||
          c.securityContext.privileged == false
        )
      message: "All initContainers must not be privileged"
    - expression: |
        !has(object.spec.ephemeralContainers) ||
        object.spec.ephemeralContainers.all(c,
          !has(c.securityContext) ||
          !has(c.securityContext.privileged) ||
          c.securityContext.privileged == false
        )
      message: "All ephemeralContainers must not be privileged"
---
apiVersion: admissionregistration.k8s.io/v1
kind: ValidatingAdmissionPolicyBinding
metadata:
  name: disallow-privileged-containers-binding
spec:
  policyName: disallow-privileged-containers
  validationActions: ["Deny"]
  matchResources:
    resourceRules:
      - apiGroups: [""]
        apiVersions: ["v1"]
        resources: ["pods"]
        operations: ["CREATE", "UPDATE"]
    namespaceSelector:
      matchExpressions:
        - key: pod-security.kubernetes.io/enforce
          operator: NotIn
          values: ["privileged"]
    objectSelector:
      matchExpressions:
        - key: app.kubernetes.io/name
          operator: NotIn
          values:
            - buildkit-amd64
            - buildkit-arm64
---
# Capabilities
apiVersion: admissionregistration.k8s.io/v1
kind: ValidatingAdmissionPolicy
metadata:
  name: restrict-added-capabilities
spec:
  failurePolicy: Fail
  matchConstraints:
    resourceRules:
      - apiGroups: [""]
        apiVersions: ["v1"]
        operations: ["CREATE", "UPDATE"]
        resources: ["pods"]
  validations:
    - expression: |
        !has(object.spec.containers) ||
        object.spec.containers.all(c,
          !has(c.securityContext) ||
          !has(c.securityContext.capabilities) ||
          !has(c.securityContext.capabilities.add) ||
          c.securityContext.capabilities.add.all(cap,
            cap in [
              "AUDIT_WRITE", "CHOWN", "DAC_OVERRIDE", "FOWNER",
              "FSETID", "KILL", "MKNOD", "NET_BIND_SERVICE",
              "SETFCAP", "SETGID", "SETPCAP", "SETUID", "SYS_CHROOT"
            ]
          )
        )
      message: "Adding capabilities outside the allowed baseline list is not permitted"
---
apiVersion: admissionregistration.k8s.io/v1
kind: ValidatingAdmissionPolicyBinding
metadata:
  name: restrict-added-capabilities-binding
spec:
  policyName: restrict-added-capabilities
  validationActions: ["Deny"]
  matchResources:
    resourceRules:
      - apiGroups: [""]
        apiVersions: ["v1"]
        resources: ["pods"]
        operations: ["CREATE", "UPDATE"]
    namespaceSelector:
      matchExpressions:
        - key: pod-security.kubernetes.io/enforce
          operator: NotIn
          values: ["privileged"]
---
# HostPath Volumes
apiVersion: admissionregistration.k8s.io/v1
kind: ValidatingAdmissionPolicy
metadata:
  name: disallow-hostpath-volumes
spec:
  failurePolicy: Fail
  matchConstraints:
    resourceRules:
      - apiGroups: [""]
        apiVersions: ["v1"]
        operations: ["CREATE", "UPDATE"]
        resources: ["pods"]
  validations:
    - expression: |
        !has(object.spec.volumes) ||
        object.spec.volumes.all(v,
          !has(v.hostPath)
        )
      message: "HostPath volumes are not allowed"
---
apiVersion: admissionregistration.k8s.io/v1
kind: ValidatingAdmissionPolicyBinding
metadata:
  name: disallow-hostpath-volumes-binding
spec:
  policyName: disallow-hostpath-volumes
  validationActions: ["Deny"]
  matchResources:
    resourceRules:
      - apiGroups: [""]
        apiVersions: ["v1"]
        resources: ["pods"]
        operations: ["CREATE", "UPDATE"]
    namespaceSelector:
      matchExpressions:
        - key: pod-security.kubernetes.io/enforce
          operator: NotIn
          values: ["privileged"]
---
# Host Ports
apiVersion: admissionregistration.k8s.io/v1
kind: ValidatingAdmissionPolicy
metadata:
  name: disallow-hostport
spec:
  failurePolicy: Fail
  matchConstraints:
    resourceRules:
      - apiGroups: [""]
        apiVersions: ["v1"]
        operations: ["CREATE", "UPDATE"]
        resources: ["pods"]
  validations:
    - expression: |
        !has(object.spec.containers) ||
        object.spec.containers.all(c,
          !has(c.ports) ||
          c.ports.all(p,
            !has(p.hostPort) || p.hostPort == 0
          )
        )
      message: "HostPort usage must be 0 or unset"
---
apiVersion: admissionregistration.k8s.io/v1
kind: ValidatingAdmissionPolicyBinding
metadata:
  name: disallow-hostport-binding
spec:
  policyName: disallow-hostport
  validationActions: ["Deny"]
  matchResources:
    resourceRules:
      - apiGroups: [""]
        apiVersions: ["v1"]
        resources: ["pods"]
        operations: ["CREATE", "UPDATE"]
    namespaceSelector:
      matchExpressions:
        - key: pod-security.kubernetes.io/enforce
          operator: NotIn
          values: ["privileged"]
    objectSelector:
      matchExpressions:
        - key: app.kubernetes.io/name
          operator: NotIn
          values:
            - esphome-device-builder
---
# AppArmor
apiVersion: admissionregistration.k8s.io/v1
kind: ValidatingAdmissionPolicy
metadata:
  name: restrict-apparmor-profile
spec:
  failurePolicy: Fail
  matchConstraints:
    resourceRules:
      - apiGroups: [""]
        apiVersions: ["v1"]
        operations: ["CREATE", "UPDATE"]
        resources: ["pods"]
  validations:
    - expression: |
        !has(object.spec.securityContext) ||
        !has(object.spec.securityContext.appArmorProfile) ||
        !has(object.spec.securityContext.appArmorProfile.type) ||
        object.spec.securityContext.appArmorProfile.type in ["RuntimeDefault", "Localhost"]
      message: "Pod-level AppArmor profile must be RuntimeDefault, Localhost, or unset"
    - expression: |
        !has(object.spec.containers) ||
        object.spec.containers.all(c,
          !has(c.securityContext) ||
          !has(c.securityContext.appArmorProfile) ||
          !has(c.securityContext.appArmorProfile.type) ||
          c.securityContext.appArmorProfile.type in ["RuntimeDefault", "Localhost"]
        )
      message: "Container AppArmor profile must be RuntimeDefault, Localhost, or unset"
    - expression: |
        !has(object.metadata.annotations) ||
        !has(object.metadata.annotations["container.apparmor.security.beta.kubernetes.io"])
      message: "Pods must not have the 'container.apparmor.security.beta.kubernetes.io' annotation"
---
apiVersion: admissionregistration.k8s.io/v1
kind: ValidatingAdmissionPolicyBinding
metadata:
  name: restrict-apparmor-profile-binding
spec:
  policyName: restrict-apparmor-profile
  validationActions: ["Deny"]
  matchResources:
    resourceRules:
      - apiGroups: [""]
        apiVersions: ["v1"]
        resources: ["pods"]
        operations: ["CREATE", "UPDATE"]
    namespaceSelector:
      matchExpressions:
        - key: pod-security.kubernetes.io/enforce
          operator: NotIn
          values: ["privileged"]
